  # POS_INF = 1000
  # NEG_INF = -1000
  #
  # def make_move(board)
  #   @transposition_table = {}
  #   if board.empty?
  #     board.update(choose_starting_move, symbol)
  #   else
  #     @best_score = {}
  #     negamax(board)
  #     board.update(@best_score.max_by { |key, value| value }[0], symbol)
  #   end
  # end
  #
  # def choose_starting_move
  #   OPENING_GAMBITS.sample
  # end
  #
  # def negamax(board, depth = 0, alpha = NEG_INF, beta = POS_INF, player = 1)
  #   transposition = @transposition_table["#{board},#{depth},#{alpha},#{beta},#{player}"]
  #   return transposition unless transposition.nil?
  #   return player * score(board, depth) if board.over?
  #
  #   max = NEG_INF
  #
  #   board.available_tiles.each do |space|
  #     board.update(space, board.active_player_symbol)
  #     value = -negamax(board, depth + 1, -beta, -alpha, -player)
  #     board.reset(space)
  #
  #     max = [max, value].max
  #     @best_score[space] = max if depth.zero?
  #     alpha = [alpha, value].max
  #     return alpha if alpha >= beta
  #   end
  #
  #   @transposition_table["#{board},#{depth},#{alpha},#{beta},#{player}"] = max
  #   max
  # end
  #
  # def score(board, depth)
  #   return 0 if board.tied?
  #   return 1000 / depth if board.won?(symbol)
  #   -1000 / depth
  # end














=begin



 0 | 1 | 2
---+---+---
 3 | 4 | 5
---+---+---
 6 | 7 | 8



  0 |  1 |  2 |  3
----+----+----+----
  4 |  5 |  6 |  7
----+----+----+----
  8 |  9 | 10 | 11
----+----+----+----
 12 | 13 | 14 | 15



=end











